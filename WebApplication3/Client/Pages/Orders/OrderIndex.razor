@page  "/orders/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
<h3> Orders</h3>
<a href="/orders/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Order
</a>
<br />
<br />

@if (Orders == null)
{
    <div class="alert alert-info">Loading Order..</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Quantity</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in Orders)
            {
                <tr>
                    <td>@order.Name</td>
                    <td>@order.Quantity</td>
                    
                    <td>
                        <a href="/orders/view/@order.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/orders/edit/@order.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(order.Id))">
                            <span class="oi oi-delete"></span>
                        </button>

                    </td>
                </tr>

            }
        </tbody>
    </table>

}

@code
{
    private List<Order> Orders;
    protected async override Task OnInitializedAsync()
    {
        Orders = await _client.GetFromJsonAsync<List<Order>>($"{EndPoints.OrdersEndPoint}");

    }
    async Task Delete(int orderId)
    {
        var order = Orders.First(q => q.Id == orderId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {order.Name}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{EndPoints.OrdersEndPoint}/{orderId}");
            await OnInitializedAsync();
        }
    }


}
